
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_Main.tmc (v4.2.0) ... supports Elite Dangerous v3.7 (Fleet Carriers)

// Uses REXEC to read status.json every second and process Flags when it changes

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================
// fnName()					refer to ED_Functions file
// initName()				refer to ED_Functions file
// fnsName()				refer to ED_StateTracker file
// tgName()					refer to ED_Toggles file
// mName					refer to ED_Macros file
// Global Defines			refer to ED_KeyMap file
// Global Variables			refer to ED_GlobalVars file
// User Config Settings		refer to ED_GlobalVars file
// ========================================================

// START

// -------------- //
// included files //
// -------------- //

include "targetdx64enh.tmh"					// This is my modified version of targetdx128.tmh

// target.tmh "include" is mandatory.
// target.tmh has an include statement for defines.tmh and hid.tmh. 
// hid.tmh has an include statement for sys.tmh
// The above listed files are all bundled with the TARGET software, therefore you do not need
// to package them with your script bundle.

include "ED_GlobalVars.tmh"				// These six files make up my script bundle
include "ED_Keymap.ttm"					// The order that these are 'included' matters
include "ED_UserSettings.tmh"
include "ED_Functions.tmh"
include "ED_StateTracker.tmh"
include "ED_Toggles.tmh"
include "ED_Macros.tmh"
// include "ED_MacrosFC.tmh"				// Enter Hanger macro changed for Fleet Carriers BETA
// include "ED_CommsControl.tmh"			// Under development


// --------------- //
// program startup //
// --------------- //

	int main() {
	
		//  Alternate statements:
		// 'Exclude(&device);'		issues 'Configure(&device, MODE_EXCLUDED);' in target.tmh <- this is already in target.tmh
		
		//  The following two statements were created because they make sense they should be in there...
		// 'Filter(&device);'		issues 'Configure(&device, MODE_FILTERED);' 
		// 'KeepEnabled(&device);'	issues 'Configure(&device, MODE_KEEPENABLED);'
		
		Exclude(&HCougar);
		Exclude(&T16000);
		Exclude(&T16000L);
		Exclude(&JoystickF18);
		Exclude(&TWCSThrottle);
		Exclude(&TFRPHARudder);
		Exclude(&LMFD);
		Exclude(&RMFD);
		Filter(&TFRPRudder);
		
		if(Init(&EventHandle)) return 1;
				
// ---------------------------------------- //
// Initialise LEDs, variables and functions //
// ---------------------------------------- //

		SetKBRate(PulseTime, DelayTime);										// Base Settings 	(See EDSettings.tmh)
		SetKBLayout(KBLayout);

		ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, SetLED)); 				// Set overall LED back-light intensity...
//		fnSetLEDs(0);
		fnSetLEDs();
		
		fnCustomCommands();														// Initialise Custom Macros (See EDMacros.tmh)
		
		fnsStartCheck();														// Check for vital files and game start		
		initTextToSpeech();														// Initialise Text-To-Speech engine
		initSoundFX();															// Initialise Sound Effects engine
//		initCommsChannels();													// Initialise Voice Communications 


// -------------------------- //
// Initialise Flight controls //
// -------------------------- //

		SetShiftButton(&Joystick, S3, &Throttle, PSF, PSB);						// ** DO NOT TOUCH **  Joystick S3 for IO, Throttle pinky SWITCH for UMD
		
		initJoystickAxis();
		initThrottleAxis();														// Includes Throttle "Friction Control" Slider
		initTFRPRudder();

		fnSetJoystickCurves(MILD, NOPRINT);										// Initialise for default position of Autopilot switch
		
		StartupLock = 0;														// Set in EDSettings.tmh. Reset now initialisation is complete
		
		if(Flags == 0) printf("\x0aWaiting for Game to load...\x0a");
		
// ---------------------------------------- //
// Map Joystick triggers, switches and hats //
// ---------------------------------------- //

		// Include MapKey for everything.
		// Include MapKeyR only where used.

//		(Gun Trigger - Primary Fire)
//		----------------------------

		MapKeyIOUMD(&Joystick, TG1,		// (Gun Trigger - Stage 1)
			0,																								// IU -
			SEQ(REXEC(0, 7000, "ActKey(PULSE+KEYON+PrimaryFire);", RNOSTOP), EXEC("StopAutoRepeat(0);")),	// OU - Fires every 7 seconds until stopped (eg pulse wave scanner)
			0,																								// IM -
			EXEC("fnAdvFireControl(0);"),																	// OM - default Primary Fire action
			EXEC("tgTriggerMode(1);"),																		// ID - Swap trigger action between timed and press-to-fire/press-to-stop
			EXEC("fnAdvFireControl(1);")																	// OD - Shifted Primary Fire action
			);
			
		MapKeyRUMD(&Joystick, TG1,		// TG1 RELEASE
			0,																								// RU -
			EXEC("ActKey(PrimaryFire);"),																	// RM - Release trigger 
			0																								// RD - 
			);
			
		MapKey(&Joystick, TG2, 0);		// (Gun Trigger - Stage 2)											// <not currently used>

//		(Master Mode Control Button)
//		----------------------------

		MapKeyUMD(&Joystick, S1,
			EXEC("tgHUDMode();"),																			// U - Toggle - Analysis/Combat Mode
			EXEC("tgHardpoints();"),																		// M - Deploy/Retract Hard-points
			0																								// D -
			);

//		(Weapons Release Button - Secondary Fire)
//		-----------------------------------------

		MapKeyIOUMD(&Joystick, S2,
			0,																								// IU -
			SEQ(REXEC(1, 7000, "ActKey(PULSE+KEYON+SecondaryFire);", RNOSTOP), EXEC("StopAutoRepeat(1);")),	// OU - Fires every 7 seconds until stopped (eg pulse wave scanner)
			0,																								// IM - 
			EXEC("fnAdvFireControl(2);"),																	// OM - default Secondary Fire action
			EXEC("tgTriggerMode(2);"),																		// ID - Swap trigger action between timed and press-to-fire/press-to-stop
			EXEC("fnAdvFireControl(3);")																	// OD - Shifted Secondary Fire action
			);
			
		MapKeyRUMD(&Joystick, S2,		// S2 RELEASE
			0,																								// RU -
			EXEC("ActKey(SecondaryFire);"),																	// RM - Release trigger 
			0																								// RD -
			);


// 		(Nosewheel Steering Button)
//		---------------------------

		MapKey(&Joystick, S3, 0);				// ** DO NOT TOUCH ** Reserved for ShiftButton for IO

//		(Joystick Pinky Lever Switch)
//		-----------------------------

		MapKey(&Joystick, S4, EXEC("tgEnhancedFAOFF();"));												// TOGGLE: FA-OFF/ON

//		China Hat (Trim Switch)
//		-----------------------

		MapKeyUMD(&Joystick, H1U,
			EXEC("tgFSSMode();"),																		// U - Toggle FSS Mode
			PULSE+NextFireGroup,																		// M - Select Previous Fire Group
			PULSE+DSSModeOFF																			// D - Toggle DSSMode
			);

		MapKey(&Joystick, H1D, PULSE+PrevFireGroup);													// Select Next Fire Group
		
		MapKey(&Joystick, H1L, TEMPO(0, EXEC("tgLandingGear(0);"), LongPress));							// Long Press = Toggle Landing Gear (avoids accidental toggle)
		
		MapKeyUMD(&Joystick, H1R,
			EXEC("tgLights(1);"),																		// U - Turn on Night Vision
			TEMPO(0,	EXEC("tgLights(0);"), LongPress),												// M - Long Press = Toggle Ship Lights (avoids accidental toggle)
			0																							// D - 
			);

//		(Target Management Switch)		// Target Designator
//		--------------------------

		MapKeyUMD(&Joystick, H2U,
			EXEC("tgPlanetView();"),																	// U - Toggle - Front/Back view of planet
			PULSE+SelectTargetAhead,																	// M - Target ahead
			PULSE+SelectTargetAhead																	// D - Target ahead
			);
			
		MapKeyUMD(&Joystick, H2D,
			0,																							// U
			PULSE+SelectHighestThreat,																	// M - default - Target highest threat
			PULSE+WingmanTarget																			// D - Select currently selected wing-man's target
			);
			
		MapKeyUMD(&Joystick, H2L,
			0,																							// U
			PULSE+SelectNextShip,																		// M - default - Cycle selection of Next Ship
			SEQ(PULSE+SelectWingman1, PULSE+SelectWingman2, PULSE+SelectWingman3)						// D - Cycle selection of Wing-men
			);
			
		MapKeyUMD(&Joystick, H2R,
			0,																							// U
			PULSE+SelectNextHostileShip,																// M - default - Cycle selection of Next Hostile
			PULSE+WingmanNavlock																		// D - Select currently selected wing-man's NAV target
			);

//		(Data Management Switch)		// Power (PIP) Management
//		------------------------

		MapKey(&Joystick, H3U, EXEC("fnPIPManager(ENG);"));												// Fire Engine focussed PIP sequence
		MapKey(&Joystick, H3D, PULSE+BalancePower);														// Balance PIP sequence
		MapKey(&Joystick, H3L, EXEC("fnPIPManager(SYS);"));												// Fire System focussed PIP sequence
		MapKey(&Joystick, H3R, EXEC("fnPIPManager(WEP);"));												// Fire Weapon focussed PIP sequence
		
//		(Countermeasures Management Switch)		// Countermeasures and camera/FSS Zoom
//		-----------------------------------

		MapKeyUMD(&Joystick, H4U,
			EXEC("fnAdvancedSCB(2);"),																	// U - Double Bank + 1 Heatsink
			TEMPO(EXEC("fnAdvancedSCB(0);"), EXEC("fnAdvancedSCB(1);"), LongPress),						// M - Fire Shield Cell Bank
			CameraZoomIn																				// D - Camera/FSS Zoom - IN
			);
			
		MapKeyUMD(&Joystick, H4D,
			0,																							// U -
			EXEC("fnHeatsink();"),																		// M - Fire Heat Sink
			CameraZoomOut																				// D - Camera/FSS Zoom - OUT
			);
// ---			
		MapKeyUMD(&Joystick, H4L,
			0,																							// U -
			EXEC("ActKey(KEYON+ChargeECM); printf(\"! ECM Charging...\");"),							// M - Charge ECM (Electronic Counter Measures)
			CameraBlurOut																				// D - Camera Blur - OUT
			);

		MapKeyRUMD(&Joystick, H4L,				// RELEASE
			0,																							// RU - 
			EXEC("ActKey(ChargeECM); printf(\"Fired !\\x0a\");"),										// RM - Fire ECM when trigger is released
			0																							// RD - 
			);
// ---			
		MapKeyUMD(&Joystick, H4R,
			0,																							// U -
			EXEC("fnChaff();"),																			// M - Fire Chaff
			CameraBlurIn																				// D - Camera Blur - IN
			);
			
		MapKeyUMD(&Joystick, H4P,
			EXEC("fnPIPMode(0);"),																		// U - Reset PIPMode 
			EXEC("fnPIPMode(1);"),																		// M - Increment PIPMode
			EXEC("fnPIPMode(2);")																		// D - Decrement PIPMode 
			);

// ------------------------------------ //
// Map Throttle STICK switches and hats //
// ------------------------------------ //

//		(Slew Control Button)		// Miscellaneous
//		---------------------

		MapKeyUMD(&Throttle, SC,
			PULSE+ShowConnectionStatus,							// U - Display Bandwidth counters only. Alt = "mShowGameStats"
			PULSE+ResetHeadOrientation,							// M - default - reset EDTracker centre
			0													// D - 
			);

// 		(Left Throttle Button)	// Headlook On/Off / External Camera
//		----------------------

		MapKeyUMD(&Throttle, LTB, 
			EXEC("tgExtCamera();"),								// U - Turn External camera On/Off
			PULSE+LookOnOff,									// M - Toggle HeadLook On/Off
			0													// D - 
			);

//		(Pinky Switch)		// Shift Modifier Switch
//		--------------

		MapKey(&Throttle, PSF, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD
		MapKey(&Throttle, PSM, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD
		MapKey(&Throttle, PSB, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD

//		(Coolie Switch)		// Frame Shift Drive functions
//		---------------

		MapKey(&Throttle, CSU, EXEC("tgWarpDrive(0);"));		// Toggle: Engage Super-cruise Engine
		MapKey(&Throttle, CSD, EXEC("tgWarpDrive(1);"));		// Toggle: Initiate Hyper Jump
		MapKey(&Throttle, CSL, PULSE+SelectNextSystemInRoute);	// Select Next System in Route
		MapKey(&Throttle, CSR, PULSE+OrbitLines);				// Toggle: Turn Orbit lines ON/OFF

//		(Mike Switch)		// Communications Controller functions
//		-------------

		MapKey(&Throttle, MSU, 0);								// Reserved for Communications functions
		MapKey(&Throttle, MSD, 0);								// Reserved for Communications functions
		MapKey(&Throttle, MSL, 0);								// Reserved for Communications functions
		MapKey(&Throttle, MSR, 0);								// Reserved for Communications functions
		MapKey(&Throttle, MSP, 0);								// Reserved for Communications functions
		
/*		// Use IO so we don't accidentally change channels when we push-to-talk

		MapKeyIO(&Throttle, MSU,
			EXEC("fnChannelSelect(CHNLUP);"),					// I - Channel Up
			0													// O - do nothing
			);
			
		MapKeyIO(&Throttle, MSD, 
			EXEC("fnChannelSelect(CHNLDN);"),					// I - Channel Down
			0													// O - do nothing
			);
			
		// Use IO so we don't accisnetally toggle PTT mode when we push-to-talk
			
		MapKeyIO(&Throttle, MSL, 
			EXEC("tgPTTMode();"), 								// I - Toggle PTT Mode
			0													// O - do nothing
			);
			
		MapKeyIO(&Throttle, MSR, 
			EXEC("tgPTTMode();"), 								// I - Toggle PTT Mode
			0													// O - do nothing
			);
		
		MapKeyIO(&Throttle, MSP, 
			EXEC("fnCommStatus();"),							// I - Announce current Comms Status
			EXEC("fnMicControl(1);")							// O - Push to Talk
			);
			
		MapKeyRIO(&Throttle, MSP, 			// RELEASE	
			0, 													// RI - do nothing
			EXEC("fnMicControl(0);")							// RO - Release PTT 
			);
*/

//		(Speed Brake)		// Reverse Throttle function modifiers
//		-------------

		MapKeyUMD(&Throttle, SPDF,
			EXEC("tgReverseThrust(0);"),						// U - Reverse Only			- No Speedbrake
			EXEC("tgReverseThrust(1);"),						// M - Standard Reverse		- Deploy Speedbrake if Hardpoints deployed
			EXEC("tgReverseThrust(2);")							// D - Align Switch only	- Deploy Speedbrake only (no Reverse)
			);

		MapKeyR(&Throttle, SPDF, EXEC("tgReverseThrust(1);"));	// RELEASE - Turn off Reverse Throttle
		
		MapKey(&Throttle, SPDB, PULSE+EngineBoost);				// Boost

//		(Boat Switch)		//
//		-------------

		MapKeyUMD(&Throttle, BSF, 
			SEQ(PULSE+mNAVBeaconWing, PULSE+mNAVBeaconOff),							// U - NAV Beacon WING/OFF
			0,																		// M - 
			EXEC("tgTxt2Speech();")													// D - Toggle EnableVoice (TextToSpeech)
			);
			
		MapKey(&Throttle, BSM, 0);													// <not currently used>
		
		MapKeyUMD(&Throttle, BSB, 
			PULSE+mReportCrimesToggle,												// U - Report crimes against me ON/OFF
			0,																		// M -
			0																		// D -
			);

//		(China Hat)			// Subsystem Targetting
//		-----------

		MapKey(&Throttle, CHF, PULSE+SelectNextSubsystem);
		MapKey(&Throttle, CHB, PULSE+SelectPrevSubsystem);

// ---------------------------------------//
// Map Throttle BASE buttons and switches //
// ---------------------------------------//

//		(AutoPilot Select)	// JoystickCurves Selector
//		------------------

		MapKey(&Throttle, APPAT, EXEC("fnSetJoystickCurves(NONE, PRINT);"));		// Set Joystick curves = NONE
		MapKey(&Throttle, APAH,  EXEC("fnSetJoystickCurves(MILD, PRINT);"));		// Set Joystick curves = MILD
		MapKey(&Throttle, APALT, EXEC("fnSetJoystickCurves(MEDIUM, PRINT);"));		// Set Joystick curves = MEDIUM

//		(Enhanced Attitude Control (EAC) Arm/Off)
//		-----------------------------------------
		
		MapKey(&Throttle, EACON, EXEC("tgSilentRunning(ON);"));
		MapKey(&Throttle, EACOFF, EXEC("tgSilentRunning(OFF);"));

//		(Radar Altimeter)
//		-----------------

		MapKey(&Throttle, RDRNRM, EXEC("tgCargoScoop(DEPLOY);"));
		MapKey(&Throttle, RDRDIS, EXEC("tgCargoScoop(RETRACT);"));

//		(Landing Gear Horn)
//		-------------------

		MapKey(&Throttle, LDGH, PULSE+mClearChatBox);

//		(Autopilot Engage)
//		------------------

		MapKeyUMD(&Throttle, APENG, 
			0,																				// U -
			EXEC("fnRequestDock();"),														// M - Request Docking
			EXEC("fnHangerServices(1);")													// D - Hanger Services
			);

//		(Flaps)
//		-------

		MapKeyUMD(&Throttle, FLAPU,
			EXEC("fnVoiceVolume(INCREASE);"),												// U - Increase TextToSpeech volume
			PULSE+GalaxyMap,																// M - Galaxy Map - ON
			0																				// D - 
			);
			
		MapKeyRUMD(&Throttle, FLAPU,				// RELEASE
			0,																				// RU -
			PULSE+GalaxyMap,																// RM - Galaxy View - OFF
			0																				// RD -
			);
			
		MapKey(&Throttle, FLAPM, 0);
			
		MapKeyUMD(&Throttle, FLAPD,
			EXEC("fnVoiceVolume(DECREASE);"),												// U - Decrease TextToSpeech volume
			PULSE+SystemMap,																// M - System Map view - ON
			PULSE+LED(&Throttle, LED_INTENSITY, 0)											// D - Turn Throttle Base LEDs off 
			);
			
		MapKeyRUMD(&Throttle, FLAPD,				// RELEASE
			0,																				// RU -
			PULSE+SystemMap,																// RM - System Map - OFF
			PULSE+LED(&Throttle, LED_INTENSITY, SetLED)										// RD - Turn Throttle Base LEDs on
			);

//		(Auxiliary Power Unit)
//		----------------------

		MapKey(&Throttle, APUON, EXEC("fnDeploySRV(DEPLOY);"));								// "Start"	- Deploy SRV
		MapKey(&Throttle, APUOFF, EXEC("fnDeploySRV(RECOVER);"));							// "OFF"	- Board Ship

//		(Engine Operate - Right)
//		------------------------

		MapKey(&Throttle, EORIGN, PULSE+SRVRecallDismissShip);							// From SRV - Recall/Dismiss Ship
		MapKey(&Throttle, EORNORM, 0);														// <not currently used>
		MapKey(&Throttle, EORMOTOR, PULSE+HideShipGUI);										// Toggle: Ship GUI OFF
		MapKeyR(&Throttle, EORMOTOR, PULSE+HideShipGUI);									// Toggle: Ship GUI ON

//		(Engine Operate - Left)
//		-----------------------

		MapKeyUMD(&Throttle, EOLIGN,														// Menu Log to ...
			 EXEC("fnModeSwitch(0);"),														// U - OPEN Mode
			 EXEC("fnModeSwitch(1);"),														// M - PRIVATE Mode
			 EXEC("fnModeSwitch(2);")														// D - SOLO Mode
			 );
			 
		MapKey(&Throttle, EOLNORM, 0);														// <not currently used>
		MapKey(&Throttle, EOLMOTOR, 0);														// <not currently used>

//		(Engine Fuel Flow - Right)
//		--------------------------

		MapKeyUMD(&Throttle, EFRNORM,
			0,																				// U - 
			EXEC("GameLoaded = 0;"),														// U - Reset GameLoaded flag
//			EXEC("fnSetLEDs(0);")															// D - Reset LEDs
			EXEC("fnSetLEDs();")															// D - Reset LEDs
			);
			
		MapKey(&Throttle, EFROVER, 0);														// <not currently used>

//		(Engine Fuel Flow - Left)
//		-------------------------

		MapKeyUMD(&Throttle, EFLNORM,
			EXEC("fnDebugStates(DebugON);"),												// U - Debug tool: State Dump. Debug turned ON
			EXEC("fnDebugStates(DebugOFF);"),												// M - Debug tool: Basic State Dump. No Debug
			0
			);
			
		MapKey(&Throttle, EFLOVER, 0);														// <not currently used>

//		(Engine Idle - Left)
//		--------------------

		MapKey(&Throttle, IDLELON, EXEC("fnHangerServices(1);"));							// Enter Hanger and Station Services
		MapKey(&Throttle, IDLELOFF, EXEC("fnHangerServices(0);"));							// Exit Hanger, Lift off.

//		(Engine Idle - Right)
//		---------------------
		
		MapKey(&Throttle, IDLERON, 0);														// <not currently used>
		MapKey(&Throttle, IDLEROFF, 0);														// <not currently used>

	}	// end of int main()

//

	int EventHandle(int type, alias o, int x) {
		DefaultMapping(&o, x);
	}

// END
